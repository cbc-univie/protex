[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "protex"
authors = [
    {name = "Marcus Wieder", email = "marcus.wieder@gmail.com"},
    {name = "Florian JÃ¶rg"},
]
description = "Proton exchange using SAMS and openMM for ionic liquids"
readme = "README.md"
requires-python = ">=3.7"
keywords = ["molecular dynamics", "proton exchange"]
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
]
#dependencies = [
#    "requests",
#    'importlib-metadata; python_version<"3.8"',
#]
dynamic = ["version"]

[project.urls]
documentation = 'https://florianjoerg.github.io/protex'
repository = 'https://github.com/florianjoerg/protex'

[tool.setuptools]
packages = ["protex"]

[tool.setuptools_scm]
write_to = "protex/_version.py"


[tool.ruff]
select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # isort
  "I",
  # pep8-naming
  "N",
  # pydocstyle
  "D",
  # pyupgrade
  #"UP",
  # flake8-2020
  "YTT",
  # flake8-annotations
  "ANN",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-pytest-style
  "PT",
  # flake8-quotes
  "Q",
  # flake8-simplyfy
  # "SIM",
  # pylint
  "PLE", "PLR", "PLW",
]


ignore = [
  # Never enforce `E501` (line length violations).
  "E501",
  # controversial
  "B006",
  # controversial
  "B007",
  # controversial
  "B008",
  # setattr is used to side-step mypy
  "B009",
  # getattr is used to side-step mypy
  "B010",
  # tests use assert False
  "B011",
  # tests use comparisons but not their returned value
  "B015",
  # false positives
  "B019",
  # Loop control variable overrides iterable it iterates
  "B020",
  # Function definition does not bind loop variable
  "B023",
  # Functions defined inside a loop must not use variables redefined in the loop
  # "B301",  # not yet implemented
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"] # "I", "PT", "Q"
# Do not fix unused import and unused variables
unfixable = ["F401", "F841"] 

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.coverage.run]
#branch = true
omit = ["*/tests/*", "protex/_version.py"]
#plugins = ["Cython.Coverage"]
#source = ["pandas"]

# [tool.coverage.report]
# ignore_errors = false
# show_missing = true
# omit = ["pandas/_version.py"]
# exclude_lines = [
#   # Have to re-enable the standard pragma
#   "pragma: no cover",
#   # Don't complain about missing debug-only code:s
#   "def __repr__",
#   "if self.debug",
#   # Don't complain if tests don't hit defensive assertion code:
#   "raise AssertionError",
#   "raise NotImplementedError",
#   "AbstractMethodError",
#   # Don't complain if non-runnable code isn't run:
#   "if 0:",
#   "if __name__ == .__main__.:",
#   "if TYPE_CHECKING:",
# ]

# [tool.coverage.html]
# directory = "coverage_html_report"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(message)s"

log_file = "protex/tests/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
